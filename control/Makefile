# Makefile to automatically compile executable and test binary

### Variable setup

# Get current base directory
MAKEDIR = $(realpath $(firstword $(MAKEFILE_LIST)))
DIRNAME = $(dir $(MAKEDIR:%/=%))

# System library
SYSDIR = ../system
SYSBASE = $(notdir $(SYSDIR))
SYSLIB = $(SYSDIR)/lib$(SYSBASE).a

# Get the name of the directory we are in (i.e. guidance, navigation, or control)
# Does not work if the current directory has spaces in the name
BASENAME = $(shell basename $(lastword $(DIRNAME)))

# Source and header directories
MAINDIR = main
DEPLOYDIR = deploy
TESTDIR = test
SRCDIR = src
INCDIR = inc $(SYSDIR)/inc

# bld and subdirectories
BLDDIR = bld
OBJDIR = $(BLDDIR)/obj
DEPDIR = $(BLDDIR)/dep
BINDIR = $(BLDDIR)/bin

# Locate API (non-main) source files, and corresponding object files
SRCS = $(foreach dir,$(SRCDIR),$(wildcard $(dir)/*.c))
OBJS = $(foreach src,$(notdir $(SRCS)),$(OBJDIR)/$(src:.c=.o))
DEPS = $(foreach src,$(notdir $(SRCS)),$(DEPDIR)/$(src:.c=.d))

# Main sources and binaries
MAINSRC = $(BASENAME)_main.c
MAINBASE = $(basename $(MAINSRC))
MAINOBJ = $(MAINBASE:%=$(OBJDIR)/%.o)
MAINDEP = $(MAINBASE:%=$(DEPDIR)/%.d)
MAINBIN = $(MAINBASE:%=$(BINDIR)/%.elf)
LMAINBIN = $(notdir $(MAINBIN))

# Test deployment sources and binaries
DEPLOYSRC = deploy_$(MAINSRC)
DEPLOYBASE = $(basename $(DEPLOYSRC))
DEPLOYOBJ = $(DEPLOYBASE:%=$(OBJDIR)/%.o)
DEPLOYDEP = $(DEPLOYBASE:%=$(DEPDIR)/%.d)
DEPLOYBIN = $(DEPLOYBASE:%=$(BINDIR)/%.elf)
LDEPLOYBIN = $(notdir $(DEPLOYBIN))

# Test sources and binaries for cgreen
TESTSRC = $(notdir $(wildcard $(TESTDIR)/*.c))
TESTBASE = $(foreach src,$(TESTSRC),$(basename $(src)))
TESTOBJ = $(TESTBASE:%=$(OBJDIR)/%.o)
TESTDEP = $(TESTBASE:%=$(DEPDIR)/%.d)
TESTBIN = $(TESTBASE:%=$(BINDIR)/%.so)
LTESTBIN = $(notdir $(TESTBIN))
# cgreen wants a shared object file .so

# Files for gcov coverage report
COVDIR = $(BLDDIR)/cov
COVS = $(foreach src,$(SRCS),$(COVDIR)/$(notdir $(src)).gcov)

# Compiler flags
CC = gcc
CFLAGS = -g -Wall --coverage
DEFPREFIX = -DMRFUS_CONFIG_
DEFINES = DEBUG
#DEFINES += DEPLOY
DEFFLAGS = $(addprefix $(DEFPREFIX),$(DEFINES))
TESTFLAGS = -shared -fPIC
LIBS = $(SYSBASE) pthread m
LIBFLAGS = -L$(SYSDIR) $(foreach lib,$(LIBS),-l$(lib))
INCFLAGS = $(foreach inc,$(INCDIR),-iquote $(inc))
DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)/$*.d

# Post-compilation step, ensure thing just created is last modified
POSTCOMPILE = touch $@


# Set up path for source file searching in main/ and src/
SRCPATH = $(MAINDIR: =:):$(DEPLOYDIR: =:):$(TESTDIR: =:):$(SRCDIR: =:)
vpath %.c $(SRCPATH)
vpath %.o $(OBJDIR)

# Useful debug print for make variables
# $(info MAKEDIR ${MAKEDIR} DIRNAME ${DIRNAME} BASENAME ${BASENAME} OBJS ${OBJS} MAINOBJ ${MAINOBJ} TESTOBJ ${TESTOBJ})
# $(info DEPS ${DEPS} ${MAINDEP} ${TESTDEP} DEPFLAGS ${DEPFLAGS})
# $(info TESTSRC=$(TESTSRC) TESTBASE=$(TESTBASE) TESTBIN=$(TESTBIN) TESTOBJ=$(TESTOBJ) TESTDEP=$(TESTDEP) OBJDIR=$(OBJDIR) )


### Start rules

# Main is the default
.PHONY: main
main: $(LMAINBIN) | $(SYSLIB)

.PHONY: test-deploy
test-deploy: $(LDEPLOYBIN) | $(LMAINBIN) $(SYSLIB)
	sudo ./$<

# Perform unit test (after executing below rules)
# Needs to include the cgreen library, which isn't necessary most of the time
.PHONY: test
test: LIBS += cgreen
test: CFLAGS += -L/usr/local/lib
# Copy and execute test script
test: $(LTESTBIN) | $(SYSLIB)
	cgreen-runner $^
	make cov

.PHONY: cov
cov: $(COVS)

# Rule to make all executable binaries
$(BINDIR)/%.elf: $(OBJDIR)/%.o $(OBJS) | $(BINDIR)
	$(CC) $(CFLAGS) $(INCFLAGS) $^ -o $@ $(LIBFLAGS)
	@$(POSTCOMPILE)
$(BINDIR)/%.so: $(OBJDIR)/%.o $(OBJS) | $(BINDIR)
	$(CC) $(CFLAGS) $(TESTFLAGS) $(INCFLAGS) $^ -o $@ $(LIBFLAGS)
	@$(POSTCOMPILE)

# Copy executables to current directory
%.elf: $(BINDIR)/%.elf
	cp $^ .
%.so: $(BINDIR)/%.so
	cp $^ .

# Rule to make all object files
.SECONDARY: $(OBJS) $(MAINOBJ) $(DEPLOYOBJ) $(TESTOBJ) $(MAINBIN) $(DEPLOYBIN) $(TESTBIN)
%.o: %.c
$(OBJDIR)/%.o: $(DEPDIR)/%.d
$(OBJDIR)/%.o: %.c | $(OBJDIR) $(DEPDIR)
	$(CC) $(CFLAGS) $(TESTFLAGS) $(DEFFLAGS) $(DEPFLAGS) $(INCFLAGS) -c $< -o $@
	@$(POSTCOMPILE)

# Rule to generate coverage analysis files
$(COVDIR)/%.gcov: % | $(COVDIR)
	test -n $$(find -name $(notdir $(basename $<)).gcno) && gcov --object-directory $(OBJDIR)/ --source-prefix $(SRCDIR)/ $< || find
	test -f $(notdir $@) && mv $(notdir $@) $@ || echo 1 > /dev/null

# Rule to make all directories when they are needed
$(OBJDIR) $(DEPDIR) $(BINDIR) $(COVDIR):
	mkdir -p $@

# Remove bld directory and all copied executables
clean:
	rm -rf $(BLDDIR) $(LMAINBIN) $(LDEPLOYBIN) $(LTESTBIN)


# Including autogenerated dependencies
$(DEPS):
include $(wildcard $(DEPS)) $(wildcard $(MAINDEP)) $(wildcard $(DEPLOYDEP)) $(wildcard $(TESTDEP))


# Rule to make system library
$(SYSLIB):
	make -C $(SYSDIR)


### Below this line are sandbox commands for possible extensions
#    * Auto detecting main source files (now only supports *_main and *_test)
#    * Copying executable files into current directory

# auto detect main files
# MAIN = $(foreach dir,$(MAINDIR),$(wildcard $(dir)/*.c))
# MAINSRCALL = $(wildcard $(MAINDIR)/*.c)
# MAINSRC = $(addprefix $(MAINDIR)/, $(addsuffix .c, $(MAINBASE)))
# MAINBINALL = $(foreach b,$(MAINALL),$(BINDIR)/$(b))
# MAINOBJALL = $(foreach o,$(MAINALL),$(OBJDIR)/$(o).o)
# MAINBINALL = $(addprefix $(BINDIR)/,$(MAINALL))
# MAINOBJALL = $(addprefix $(OBJDIR)/,$(addsuffix .o, $(MAINALL)))

# Copy multiple exe files into current dir
#$(MAINALL): %: $(BINDIR)/%
#	@echo cp $^ $@
# $(MAIN): $(MAINBIN)
# 	cp $^ $@

# Now handled by all object files located in the same place
# $(MAINBIN): $(OBJS) $(MAINOBJ)
# 	$(CC) $(CFLAGS) $(LIBFLAGS) $^ -o $@

# $(TESTBIN): $(OBJS) $(TESTOBJ)


### Old ways of doing things, in case the terse syntax stops working
#MAINOBJ = $(addprefix $(OBJDIR)/, $(addsuffix .o, $(MAINBASE)))
#MAINBIN = $(addprefix $(BINDIR)/, $(addsuffix .elf, $(MAINBASE)))
#TESTOBJ = $(addprefix $(OBJDIR)/, $(addsuffix .o, $(TESTBASE)))
#TESTBIN = $(addprefix $(BINDIR)/, $(addsuffix .elf, $(TESTBASE)))
